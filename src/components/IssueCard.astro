---
import { getAbsoluteLocaleUrl } from 'astro:i18n';
import { cn } from '@/lib/utils';
import { Markdown } from 'astro-remote';
import { Vibrant } from 'node-vibrant/node';
import sharp from 'sharp';
import Image from 'astro/components/Image.astro';
import { type CollectionEntry, render } from 'astro:content';
import { ChevronRightIcon } from 'lucide-react';
import { loadTranslations } from '@/i18n';

const { post } = Astro.props as {
  post: CollectionEntry<'blog'>
};

const locale = Astro.currentLocale || 'en';
const t = await loadTranslations(locale);
const { title, description, created_at: createdAt, cover, translation_id: id } = post.data;
const { Content } = await render(post);

const formattedDate = new Intl.DateTimeFormat(locale, {
  year: '2-digit',
  month: 'short',
  day: 'numeric',
}).format(createdAt);

let p;
try {
  const response = await fetch(new URL(cover, import.meta.env.PUBLIC_BASE_URL));
  const arrayBuffer = await response.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);
  p = await Vibrant.from(await sharp(buffer).toFormat('png').toBuffer()).getPalette();
} catch (e) {
  console.warn('Error fetching vibrant palette:', e);
  p = {
    Vibrant: {
      hex: 'var(--color-foreground)',
      bodyTextColor: 'var(--color-background)',
    },
  };
}

const color = p.Vibrant?.hex || 'var(--color-foreground)';
const foregroundColor = p.Vibrant?.bodyTextColor || 'var(--color-background)';
const uid = crypto.randomUUID();
---

<div
  class={cn('max-w-prose m-auto border-y-2 flex flex-col')}
  style={`
    --vibrant-color: ${color};
    --vibrant-foreground: ${foregroundColor};
    border-color: ${color};
  `}
>
  <div class="flex flex-col md:flex-row-reverse">
    <Image
      src={cover}
      alt={title}
      width={100}
      height={100}
      class="w-full md:w-auto md:min-w-24 md:max-w-48 object-cover"
    />

    <div class="flex w-full flex-col md:border-r-2 border-[var(--vibrant-color)]">
      <h1 class="text-2xl md:text-3xl text-[var(--vibrant-color)] p-2 font-black">{title}</h1>
      <div class="bg-[var(--vibrant-color)] text-[var(--vibrant-foreground)] w-full md:h-full p-2 space-y-2">
        <p class="text-sm">{formattedDate}</p>
        <Markdown content={description} />
      </div>
    </div>
  </div>

  <div id={`container-${uid}`} class="relative p-2 max-h-96 overflow-hidden">
    <div id={`content-${uid}`} class="prose text-pretty space-y-4">
      <Content />
    </div>
    <a
      id={`readMore-${uid}`}
      href={getAbsoluteLocaleUrl(locale, `/blog/${id}`)}
      class={'absolute bottom-0 left-0 w-full text-center bg-gradient-to-t from-[var(--vibrant-color)]'
        + ' to-transparent pt-4 pb-2 hidden text-[var(--vibrant-foreground)]'}
    >
      <ChevronRightIcon className="w-4 inline" />
      {t('issues.read_more')}
    </a>
  </div>
</div>

<script is:inline define:vars={{ uid }}>
const container = document.getElementById('container-' + uid);
const content = document.getElementById('content-' + uid);
const readMore = document.getElementById('readMore-' + uid);

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function onResize() {
  if (container && content && readMore && content.scrollHeight > container.clientHeight) {
    readMore.classList.remove('hidden');
  } else {
    readMore.classList.add('hidden');
  }
}

document.addEventListener('DOMContentLoaded', onResize)

window.onresize = onResize
</script>
